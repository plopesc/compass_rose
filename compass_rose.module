<?php 
// $Id$

/**
 * @file
 * 
 * This file holds the main Drupal hook functions 
 * and private functions for the Compass Rose module.
 *
 * *
 * See @link field_types Field Types API @endlink
 */

/**
 * Implementation of hook_help()
 */
function compass_rose_help($path, $arg) {
  switch ($path) {
    case 'admin/help#compass_rose':
      $output = '<p>'. t('The Compass Rose module provides widgets and field formatters that allows to represent a concrete orientation through a compass Rose.') .'</p>';
      return $output;
    break;
  }
  
}

/**
 * Implementation of hook_menu()
 */
function compass_rose_menu() {

  $items['admin/config/compass_rose'] = array(
    'title' => 'Compass Rose',
    'description' => 'Select the jQueryRotate plugin path',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('compass_rose_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

/**
 * Implements hook_theme().
 */
function compass_rose_theme() {
  return array(
    'compass_rose_buttons' => array(
      'arguments' => array('element' => NULL),
      'render element' => 'compass'
    ),
  );
}

/**
 *  Implements hook_element_info().
 *  
 *  Defines the Compass Rose buttons element.
 */

function compass_rose_element_info(){
  return array(
    'compass_rose_buttons' => array(
      '#input' => TRUE,
      '#theme' => 'compass_rose_buttons',
      '#columns' => array('value'), 
      '#delta' => 0,
      '#process' => array('compass_rose_buttons_process'),
      '#autocomplete_path' => FALSE,
    )
  );
}

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Field settings:
 *  
 * Instance settings:
 *   - image: the compass_rose image for a orientarion field.
 *   
 */
function compass_rose_field_info() {
  return array(
    'orientation' => array(
      'label' => t('Orientation'),
      'description' => t('This field stores Orientation in the database.'),
      'instance_settings' => array('image' => 'compass_rose0.png'),
      'default_widget' => 'orientation_selector',
      'default_formatter' => 'compass_rose_default',
    ),

  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function compass_rose_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form = array();

  if ($field['type'] == 'orientation') {
    $form['image'] = array(
      '#type' => 'radios',
      '#title' => t('Available compass rose'),
      '#default_value' => $settings['image'],
      '#options' => compass_rose_get_images(),
      '#required' => TRUE,
      '#attributes' => array('style' => 'float:left;'),
      '#prefix' => '<div class="compass-rose-select">',
      '#suffix' => '</div>',
    );
  }

  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'text_value_max_length': The value exceeds the maximum length.
 * - 'text_summary_max_length': The summary exceeds the maximum length.
 */
function compass_rose_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    // @todo Length is counted separately for summary and value, so the maximum
    //   length can be exceeded very easily.
/*    foreach (array('value', 'summary') as $column) {
      if (!empty($item[$column])) {
        if (!empty($field['settings']['max_length']) && drupal_strlen($item[$column]) > $field['settings']['max_length']) {
          switch ($column) {
            case 'value':
              $message = t('%name: the text may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length']));
              break;

            case 'summary':
              $message = t('%name: the summary may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length']));
              break;
          }
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => "text_{$column}_length",
            'message' => $message,
          );
        }
      }
    }*/
  }
}

/**
 * Implements hook_field_is_empty().
 */
function compass_rose_field_is_empty($item, $field) {
  if ($item['value'] < -1) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function compass_rose_field_formatter_info() {
  return array(
    'compass_rose_default' => array(
      'label' => t('Default compass rose'),
      'field types' => array('orientation'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function compass_rose_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'compass_rose_default':
      foreach ($items as $delta => $item) {
			  if (isset($item['value']) && $item['value'] >= 0) {
			    $array = array(
			      'compass_rose' => array(
			        'compass-rose-'. $entity->nid ."-". $field['field_name'] ."-". $delta => $item['value'])
			    );
			    drupal_add_js($array, 'setting');
			    compass_rose_include();
			    $element[$delta] = array('#markup' => '<div class="compass-rose-'. $entity->nid ."-". $field['field_name'] .'-wrapper">'. 
			    theme_image(array('path' => $instance['settings']['image'], 'alt' => compass_rose_default_options($item['value']), 'title' => compass_rose_default_options($item['value']), 'attributes' =>array('id' => 'compass-rose-'. $entity->nid ."-". $field['field_name'] ."-". $delta, 'class' => 'compass-rose-item'))) .
			    '</div>');
			  }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function compass_rose_field_widget_info() {
  return array(
    'orientation_selector' => array(
      'label' => t('Selector'),
      'field types' => array('orientation'),
    ),
    
    'orientation_buttons' => array(
      'label' => t('Custom buttons'),
      'field types' => array('orientation'),    
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function compass_rose_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $summary_widget = array();
  $main_widget = array();

  switch ($instance['widget']['type']) {
    case 'orientation_selector':
      $main_widget = $element + array(
        '#type' => 'select',
        '#options' => compass_rose_default_options(),
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : $instance['default_value'][0]['value'],
      );
      break;
      
    case 'orientation_buttons':
    	$main_widget = $element + array(
        '#type' => 'compass_rose_buttons',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : $instance['default_value'][0]['value'],
    	);
    	break;

  }
  $element['value'] = $main_widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function compass_rose_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'text_summary_max_length':
      $error_element = $element[$element['#columns'][1]];
      break;

    default:
      $error_element = $element[$element['#columns'][0]];
      break;
  }

  form_error($error_element, $error['message']);
}

/***************************************************************
 * Compass Rose module methods
 ***************************************************************/

/**
 * Process an individual element.
 */
function compass_rose_buttons_process($element, $form_state, $complete_form) {
  $field = field_info_instance($element['#entity_type'],$element['#field_name'],$element['#bundle']);
  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];
  
  if (is_array($element['#value']))
    $value = empty($element['#value'][$field_key]) ? 0:$element['#value'][$field_key];
  else
    $value = empty($element['#value']) ? 0:$element['#value'];
    
  $image = isset($field['settings']['image'])?$field['settings']['image']:drupal_get_path('module', 'compass_rose') .'/img/compass_rose0.png';
  
  $element['decrease_button'] = array(
    '#type' => 'item',
    '#markup' => '<button type="button" class="compass-rose-control-button" id="compass-rose-'. $field['field_name'] .'-'. $delta .'-decrease-button" rel="compass-rose-'. $field['field_name'] .'-'. $delta .'">'. t('<-') .'</button>',
    '#prefix' => '<div class="container-inline"style="margin-bottom:15px;">',
  );
  $element['increase_button'] = array(
    '#type' => 'item',
    '#markup' => '<button type="button" class="compass-rose-control-button" id="compass-rose-'. $field['field_name'] .'-'. $delta .'-increase-button" rel="compass-rose-'. $field['field_name'] .'-'. $delta .'">'. t('->') .'</button>',
    '#suffix' => '</div>',
  );
  
  $element['image'] = array(
    '#type' => 'item',
    '#markup' => theme_image(array('path' => $image, 'alt' => $image,  'title' => $image, 'attributes' => array('id' => 'compass-rose-'. $field['field_name'] .'-'. $delta))),
  );
  
  $element[$field_key] = array(
    '#type' => 'hidden',
    '#value' => $value,
    
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
//   '#bundle' => $element['#bundle'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  
  //Add JS scripts
  compass_rose_include();
  
  drupal_add_js(array(
    'compass_rose_defaults' => array(
      'compass-rose-'. $field['field_name'] .'-'. $delta => array(      
        'value' => $value,
        'input' => $field['field_name'] .'[' .$element['#language']. '][' . $delta .'][value',
        )
      )
    ), 'setting');
    
  return $element;
}

/**
 * Function that links a number of degrees to a concrete orientation
 */

function compass_rose_default_options($option = NULL) {
  $options = array(
    -1 => t('None'),
    0 => t('North'),
    45 => t('North-East'),
    90 => t('East'),
    135 => t('South-East'),
    180 => t('South'),
    225 => t('South-West'),
    270 => t('West'),
    315 => t('North-West')
  );
  if (isset($option)) {
    if (is_array($option)) {
      $option = $option['value'];
    }
    if(array_key_exists($option,$options)) {
      return $options[intval($option)];
    }
    else {
      return $option;
    }
  }
  else {
  	return $options;
  }
}

/**
 * Function that loads the images from the imf folder to select one of them
 */
function compass_rose_get_images() {
  $images = file_scan_directory(drupal_get_path('module', 'compass_rose') . '/img', '/\.(jpg|png|gif)$/');
  $fields = array();
  foreach ($images as $key => $value) {
    $fields[$value->uri] = theme_image(array('path' => $value->uri, 'alt' => $value->name, 'title' => $value->filename, 'attributes' => array()));
  }
  
  return $fields;
}

/**
 * Include necessary JS for rendering compass rose
 *
 */
function compass_rose_include() {
  // Use a static variable to prevent running URL check code repeatedly.
  static $once;
  if (!isset($once)) {
    $once = TRUE;

    $path = check_plain(variable_get('compass_rose_plugin_folder', 
      "http://wilq32.adobeair.pl/jQueryRotate/jQueryRotate.js"));
    // Check for full URL and include it if external.
    if (valid_url($path, TRUE)) {
      drupal_add_js(variable_get('compass_rose_plugin_folder', 
      "http://wilq32.adobeair.pl/jQueryRotate/jQueryRotate.js"), 'external');
    }
    else {
      drupal_add_js($path);
    }
    drupal_add_js(drupal_get_path('module', 'compass_rose') .'/js/compass_rose.js');
    drupal_add_css(drupal_get_path('module', 'compass_rose') . '/css/compass_rose.css');
  }
}

function theme_compass_rose_buttons($element) {
  return $element['compass']['#children'];
}

/**
 * Function that defines the hook_menu() config page
 */
function compass_rose_admin(){
  $jqueryrotate_source_description = t('The source for the jQueryRotate plugin can be one of two things:')
    . '<ul><li>'
    . t('URL: This means that the jQueryRotate plugin is not hosted on this site. jQueryRotate provides a hosted JS file. By default the Compass Rose module will use this.  This is @ol_api_url. This may effect performance as it is not hosted on your site.', array('@ol_api_url' => 'http://wilq32.adobeair.pl/jQueryRotate/jQueryRotate.js'))
    . '</li><li>'
    . t('Drupal Path: This is a path relative to the Drupal base. For instance, if you <a href="!ol_url">Download jQueryRotate plugin</a> manually to the Compass Rose module folder and extract it, you may use a value like: @suggested_path', 
      array(
        '!ol_url' => 'http://wilq32.adobeair.pl/jQueryRotate/Wilq32.jQueryRotate.html',
        '@suggested_path' => drupal_get_path('module', 'compass_rose') . '/source/jQueryRotate.js',
      )
    )
    . '</li></ul>';
    
    $form['compass_rose_plugin_folder'] = array(
    '#type' => 'textfield',
    '#title' => t('jQueryRotate plugin location'),
    '#default_value' => variable_get('compass_rose_plugin_folder', "http://wilq32.adobeair.pl/jQueryRotate/jQueryRotate.js"),
    '#size' => 50,
    '#maxlength' => 255,
    '#required' => true,
    '#description' => $jqueryrotate_source_description,
  );
  
  return system_settings_form($form);
}
