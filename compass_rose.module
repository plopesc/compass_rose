<?php
// $Id: compass_rose.module,v 1.5 2010/11/30 20:39:21 plopesc Exp $ 

/**
 * @file
 * This file holds the main Drupal hook functions 
 * and private functions for the Compass Rose module.
 *
 * @ingroup CCK
 */

/**
 * Implementation of hook_theme()
 */
function compass_rose_theme(){
  return array(
    'compass_rose_selector' => array(
      'arguments' => array('element' => NULL),
    ),
    'compass_rose_buttons' => array(
      'arguments' => array('element' => NULL),
    ),
    'compass_rose_formatter_default' => array(
      'arguments' => array('element' => NULL)
    ),
  );
}

/**
 * Implementation of hook_help()
 */
function compass_rose_help($path, $arg) {
  switch ($path) {
    case 'admin/help#compass_rose':
      $output = '<p>'. t('The Compass Rose Field module provides widgets and field formatters that allows to represent a concrete orientation through a compass Rose.') .'</p>';
    break;
  }
  return $output;
}

/**
 * Implementation of hook_menu()
 */
function compass_rose_menu() {

  $items['admin/settings/compass_rose'] = array(
    'title' => 'Compass Rose',
    'description' => 'Select the jQueryRotate plugin path',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('compass_rose_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

/**
 * Function that defines the hook_menu() config page
 */
function compass_rose_admin(){
  $jqueryrotate_source_description = t('The source for the jQueryRotate plugin can be one of two things:')
    . '<ul><li>'
    . t('URL: This means that the jQueryRotate plugin is not hosted on this site. jQueryRotate provides a hosted JS file. By default the Compass Rose module will use this.  This is @ol_api_url. This may effect performance as it is not hosted on your site.', array('@ol_api_url' => 'http://wilq32.adobeair.pl/jQueryRotate/jQueryRotate.js'))
    . '</li><li>'
    . t('Drupal Path: This is a path relative to the Drupal base. For instance, if you <a href="!ol_url">Download jQueryRotate plugin</a> manually to the Compass Rose module folder and extract it, you may use a value like: @suggested_path', 
      array(
        '!ol_url' => 'http://wilq32.adobeair.pl/jQueryRotate/Wilq32.jQueryRotate.html',
        '@suggested_path' => drupal_get_path('module', 'compass_rose') . '/source/jQueryRotate.js',
      )
    )
    . '</li></ul>';
    
    $form['compass_rose_plugin_folder'] = array(
    '#type' => 'textfield',
    '#title' => t('jQueryRotate plugin location'),
    '#default_value' => variable_get('compass_rose_plugin_folder', "http://wilq32.adobeair.pl/jQueryRotate/jQueryRotate.js"),
    '#size' => 50,
    '#maxlength' => 255,
    '#required' => true,
    '#description' => $jqueryrotate_source_description,
  );
  
  return system_settings_form($form);
}

/**
 * Implementation of hook_field_info().
 */
function compass_rose_field_info() {
  return array(
    'compass_rose' => array(
      'label' => t('Orientation'),
      'description' => t('A field for describe a concrete orientation.'),
    ),
  );
}

/**
 * Implementation of hook_field().
 */
function compass_rose_field($op, &$node, $field, &$items, $teaser, $page) {
  switch($op){
    case 'validate':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
          if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
          if (!empty($item['value'])) {
            if ($item['value'] > 360 || $item['value'] < -1) {
              form_set_error($error_element, t('%name: the value must be between 0� and 360�.', array('%name' => $field['widget']['label'], '%max' => $field['max_length'])));
            }
          }
        }
      }  
      return $items;
  }
}

/**
 * Implementation of hook_field_settings().
 */
function compass_rose_field_settings($op, $field){
  switch ($op){
      
  	case 'form':
  	  $form['config']['#tree'] = TRUE;
  	  $form['config']['#cache'] = TRUE;
  	  drupal_add_css(drupal_get_path('module','compass_rose'). '/css/compass_rose.css');
  	  $form['config']['image'] = array(
  	    '#type' => 'radios',
  	    '#title' => t('Available compass rose'),
        '#default_value' => $field['config']['image'],
        '#options' => compass_rose_get_images(),
  	    '#required' => TRUE,
  	    '#attributes' => array('style' => 'float:left;'),
  	    '#prefix' => '<div class="compass-rose-select">',
  	    '#suffix' => '</div>',
  	  );
	  return $form;
  	break;
  	case 'save':
  	  return array('config');
  	break;
  	case 'database columns':
      return array('value' => array('type' => 'varchar', 'length' => 3, 'not null' => FALSE, 'sortable' => TRUE));
  }
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 */
function compass_rose_elements() {
  return array(
    'compass_rose_selector' => array(
      '#input' => TRUE,
      '#columns' => array('value'), 
      '#delta' => 0,
      '#process' => array('compass_rose_selector_process'),
      '#autocomplete_path' => FALSE,
    ),
    'compass_rose_buttons' => array(
      '#input' => TRUE,
      '#columns' => array('value'), 
      '#delta' => 0,
      '#process' => array('compass_rose_buttons_process'),
      '#autocomplete_path' => FALSE,
    )
  );
}

/**
 * Implementation of hook_content_is_empty().
 */
function compass_rose_content_is_empty($item, $field) {
  if ($item['value'] < -1) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_widget_info().
 */

function compass_rose_widget_info(){
  return array(
    'compass_rose_selector' =>array(
      'label' => t('Select List'),
      'field types' => array('compass_rose'), 
    ),
    'compass_rose_buttons' => array(
      'label' => t('Custom Value'),
      'field types' => array('compass_rose')
    ),
  );
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function compass_rose_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function compass_rose_selector_process($element, $edit, $form_state, $form){
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];
  
  $element[$field_key] = array(
    '#type' => 'select',
    '#options' => compass_rose_default_options(),
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );

  return $element;
}

/**
 * Process an individual element.
 */
function compass_rose_buttons_process($element, $edit, $form_state, $form){
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];
  
  $image = isset($field['config']['image'])?$field['config']['image']:drupal_get_path('module','compass_rose').'/img/compass_rose.png';
  
   $element['decrease_button'] = array(
    '#type' => 'item',
    '#value' => '<button type="button" class="compass-rose-control-button" id="compass-rose-'.$field['field_name'].'-'.$delta.'-decrease-button" rel="compass-rose-'.$field['field_name'].'-'.$delta.'">'.t('<-').'</button>',
    '#prefix' => '<div class="container-inline"style="margin-bottom:15px;">',
  );
  $element['increase_button'] = array(
    '#type' => 'item',
    '#value' => '<button type="button" class="compass-rose-control-button" id="compass-rose-'.$field['field_name'].'-'.$delta.'-increase-button" rel="compass-rose-'.$field['field_name'].'-'.$delta.'">'.t('->').'</button>',
    '#suffix' => '</div>',
  );
  
  $element['image'] = array(
    '#type' => 'item',
    '#value' => theme_image($image,$image,$image,array('id' => 'compass-rose-'.$field['field_name'].'-'.$delta)),
  );
  
  $element[$field_key] = array(
    '#type' => 'hidden',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  
  //Add JS scripts
  compass_rose_include();
  
  drupal_add_js(array(
    'compass_rose_defaults' =>array(
      'compass-rose-'.$field['field_name'].'-'.$delta => array(      
        'value' => empty($element['#value'][$field_key]) ? 0:$element['#value'][$field_key],
        'input' =>str_replace('_','-',$field['field_name'].'-'.$delta.'-value'),
        )
      )
    ),'setting');
    
  return $element;
}

/**
 * FAPI theme for an individual text elements.
 *
 * The textfield or textarea is already rendered by the
 * textfield or textarea themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_compass_rose_selector($element) {
  return $element['#children'];
}

function theme_compass_rose_buttons($element) {
  return $element['#children'];
}

/**
 * Implementation of hook_formatter_info().
 */

function compass_rose_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('compass_rose'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}  
    
/**
 * Theme function for 'default' text field formatter.
 */
function theme_compass_rose_formatter_default($element) {
  $node = $element['#node'];
  if(isset($element['#item']['value']) && $element['#item']['value'] >= 0){
    $array = array(
      'compass_rose' => array(
        'compass-rose-'. $node->nid ."-". $element['#field_name']."-". $element['#item']['#delta'] => $element['#item']['value'])
    );
    drupal_add_js($array, 'setting');
    compass_rose_include();
    $field = content_fields($element['#field_name']);
    return '<div class="compass-rose-'. $node->nid ."-". $element['#field_name'] .'-wrapper">'. 
    theme_image($field['config']['image'],compass_rose_default_options($element['#item']['value']),compass_rose_default_options($element['#item']['value']),array('id' => 'compass-rose-'. $node->nid ."-". $element['#field_name']."-".$element['#item']['#delta'], 'class' =>'compass-rose-item')).
    '</div>';
  }
}

/**
 * Include necessary JS for rendering compass rose
 *
 */
function compass_rose_include() {
  // Use a static variable to prevent running URL check code repeatedly.
  static $once;
  if (!isset($once)) {
    $once = TRUE;

    $path = check_plain(variable_get('compass_rose_plugin_folder', 
      "http://wilq32.adobeair.pl/jQueryRotate/jQueryRotate.js"));
    // Check for full URL and include it manually if external.
    if (valid_url($path, TRUE)) {
      drupal_add_js('document.write(unescape("%3Cscript src=\''. $path . '\' type=\'text/javascript\'%3E%3C/script%3E"));', 'inline');
    }
    else {
      drupal_add_js($path);
    }
    drupal_add_js(drupal_get_path('module', 'compass_rose') .'/js/compass_rose.js');
    drupal_add_css(drupal_get_path('module','compass_rose'). '/css/compass_rose.css');
  }
}

/**
 * Function that links a number of degrees to a concrete orientation
 */

function compass_rose_default_options($option = NULL){
  $options = array(
    -1 => t('None'),
    0 => t('North'),
    45 => t('North-East'),
    90 => t('East'),
    135 => t('South-East'),
    180 => t('South'),
    225 => t('South-West'),
    270 => t('West'),
    315 => t('North-West')
  );
  if (isset($option))
    return $options[intval($option)];
  else return $options;
}

/**
 * Function that loads the images from the imf folder to select one of them
 */
function compass_rose_get_images(){
  $images = file_scan_directory(drupal_get_path('module','compass_rose') . '/img','\.(jpg|png|gif)$');
  $fields = array();
  foreach($images as $key=>$value){
    $fields[$value->filename] = theme_image($value->filename,$value->basename, $value->basename);
  }
  
  return $fields;
}